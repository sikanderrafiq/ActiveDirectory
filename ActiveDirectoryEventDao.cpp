#include "ActiveDirectoryEventDao.h"
#include <QCoreApplication>
#include <QSqlRecord>
#include <QFile>
#include <QDir>
#include <QTextStream>
#include <QsLog.h>
#include "qliqdirect/QliqDirectConfig.h"

namespace ActiveDirectory {

namespace {
static QFile s_eventLogFile;
}

template<> const bool AdBaseDao<ActiveDirectoryEvent>::autogeneratedPrimaryKey = true;
template<> const QString AdBaseDao<ActiveDirectoryEvent>::tableName = "active_directory_event";
template<> const std::vector<QString> AdBaseDao<ActiveDirectoryEvent>::columnNames = {
    "id", "type", "timestamp", "duration", "message", "category"
};

template<>
QVariant AdBaseDao<ActiveDirectoryEvent>::primaryKey(const ActiveDirectoryEvent& u)
{
    return u.id;
}

template<>
void AdBaseDao<ActiveDirectoryEvent>::bind(QSqlQuery *q, const ActiveDirectoryEvent& u)
{
    q->bindValue(":type", u.type);
    q->bindValue(":timestamp", u.timestamp.toTime_t());
    q->bindValue(":duration", u.duration);
    q->bindValue(":message", u.message);
    q->bindValue(":category", u.category);
}

template<>
ActiveDirectoryEvent AdBaseDao<ActiveDirectoryEvent>::fromRecord(const QSqlRecord& record, const QString& prefix)
{
    ActiveDirectoryEvent u;
    u.id = record.value(prefix + "id").toUInt();
    u.type = (ActiveDirectoryEvent::Type) record.value(prefix + "type").toInt();
    u.timestamp = QDateTime::fromTime_t(record.value(prefix + "timestamp").toUInt());
    u.duration = record.value(prefix + "duration").toUInt();
    u.message = record.value(prefix + "message").toString();
    u.category = (ActiveDirectoryEvent::Category) record.value(prefix + "category").toInt();
    return u;
}


int ActiveDirectoryEventDao::insert(const ActiveDirectoryEvent &adEvent, QSqlDatabase db)
{
    if (s_eventLogFile.isOpen()) {
        QTextStream stream(&s_eventLogFile);
        stream << adEvent.toTextFileString() << "\r\n";
    }
    return AdBaseDao<ActiveDirectoryEvent>::insert(adEvent, db);
}

int ActiveDirectoryEventDao::insert(ActiveDirectoryEvent::Type type, ActiveDirectoryEvent::Category category,
                                    const QString &message, QSqlDatabase db)
{
    ActiveDirectoryEvent adEvent;
    adEvent.type = type;
    adEvent.timestamp = QDateTime::currentDateTime();
    adEvent.category = category;
    adEvent.message = message;
    ActiveDirectoryEventDao::insert(adEvent, db);
}

QList<ActiveDirectoryEvent> ActiveDirectoryEventDao::select(int offset, int limit, QSqlDatabase db)
{
    QList<ActiveDirectoryEvent> ret;
    QString sql = "SELECT * FROM " + tableName;

    if (limit > 0) {
        sql += QString(" LIMIT %1").arg(limit);

        if (offset > 0) {
            sql += QString(" OFFSET %1").arg(offset);
        }
    }

    DebugSqlQuery q(db);
    q.exec(sql);
    while (q.next())
    {
        QSqlRecord record = q.record();
        ret.append(fromRecord(record));
    }
    return ret;
}

int ActiveDirectoryEventDao::deleteOlderThenDays(int days, QSqlDatabase db)
{
    QDateTime timestamp = QDateTime::currentDateTime().addDays(-days);
    DebugSqlQuery q(db);
    q.prepare("DELETE FROM " + tableName + " WHERE " + columnNames[TimestampColumn] + " < :timestamp");
    q.bindValue(":timestamp", timestamp.toTime_t());
    q.exec();
    return q.numRowsAffected();
}

QString ActiveDirectoryEventDao::eventLogFilePath()
{
    QString logPath = QCoreApplication::applicationDirPath() + QDir::separator() + "logs";
    logPath += QDir::separator() + QString(QLIQ_DIRECT_AD_EVENT_LOG_FILE_NAME);
    return logPath;
}

void ActiveDirectoryEventDao::configureEventLogFile()
{
    s_eventLogFile.close();

    QString logPath = QCoreApplication::applicationDirPath() + QDir::separator() + "logs";
    QDir dir(logPath);
    if (!dir.mkpath(logPath)) {
        QLOG_ERROR() << "Cannot create directory: " << logPath;
    }
    logPath += QDir::separator() + QString(QLIQ_DIRECT_AD_EVENT_LOG_FILE_NAME);

    QFileInfo info(logPath);
    if (info.exists() && info.size() > (10 * 1024 * 1024)) {
        QLOG_SUPPORT() << QLIQ_DIRECT_AD_EVENT_LOG_FILE_NAME << "is to big, rotating";
        QString archivePath = logPath + ".1";
        if (QFile::exists(archivePath)) {
            if (!QFile::remove(archivePath)) {
                QLOG_ERROR() << "Could not delete old file:" << archivePath;
            }
        }
        if (!QFile::rename(logPath, archivePath)) {
            QLOG_ERROR() << "Could not rotate (rename)" << logPath << "to" << archivePath;
        }
    }

    s_eventLogFile.setFileName(logPath);
    if (!s_eventLogFile.open(QIODevice::Append)) {
        QLOG_ERROR() << "Cannot open file for writing:" << logPath;
    }
}

void ActiveDirectoryEventDao::closeEventLogFile()
{
    s_eventLogFile.close();
}

void ActiveDirectoryEventDao::deleteLogFile()
{
    if (s_eventLogFile.isOpen()) {
        s_eventLogFile.close();
    }
    QFile::remove(eventLogFilePath());
    configureEventLogFile();
}

} // namespace ActiveDirectory
